#!/usr/bin/env bash

KRITA_BASE="$(cd $(dirname $BASH_SOURCE); pwd)"
KRITA_SOURCE="$KRITA_BASE/src"
KRITA_BUILD="$KRITA_BASE/build"
KRITA_RELEASE="$KRITA_BASE/release"
KRITA_DOCS="$KRITA_BASE/docs"

krita-cmake() { (
    set -e
    mkdir -p "$KRITA_BUILD"
    cd "$KRITA_BUILD"

    WARNING_FLAGS="-Wno-cast-align \
         -Wno-mismatched-tags -Wunused-parameter \
         -Wno-inconsistent-missing-override"
    cmake "$KRITA_SOURCE" -G Ninja                                           \
         -DCMAKE_C_COMPILER_LAUNCHER=ccache                            \
         -DCMAKE_C_COMPILER=clang                                      \
         -DCMAKE_C_FLAGS=-fcolor-diagnostics                           \
         -DCMAKE_CXX_COMPILER_LAUNCHER=ccache                          \
         -DCMAKE_CXX_COMPILER=clang++                                  \
        "-DCMAKE_CXX_FLAGS=-fcolor-diagnostics $WARNING_FLAGS"         \
         -DCMAKE_BUILD_TYPE=RelWithDebInfo                             \
         -DBUILD_TESTING=ON                                            \
         -DCMAKE_INSTALL_PREFIX="${KRITA_RELEASE}"
) }

krita-build-target() {
    echo -e '\n\n\n\n'
    (cd "$KRITA_BUILD"; ninja $*)
}
krita-build() { krita-build-target install; }
krita-run() { krita-build && "$KRITA_RELEASE/bin/krita" $*; }
krita-test() {
    local test_glob="*$1*Test"; shift

    echo -e '\n\n\n\n'
    (
        cd "$KRITA_BUILD"
        find -name "$test_glob" \
             -exec ninja {} \;  \
             -exec {} "$@" \;
    )
}

krita-docs() {
    (
        mkdir -p "$KRITA_DOCS"
        cd "$KRITA_DOCS"
        doxygen "$KRITA_BASE/Doxyfile" "$KRITA_SOURCE"
    )
}

cd "$KRITA_SOURCE"
